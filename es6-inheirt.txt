call、apply、bind区别
call()、apply()和bind()都是用来改变函数执行时的上下文，可借助它们实现继承；
call()和apply()唯一区别是参数不一样，call()是apply()的语法糖；
bind()是返回一个新函数，供以后调用，而apply()和call()是立即调用。

ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。
ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。

Object.getPrototypeOf方法可以用来从子类上获取父类

```
class A {}

class B extends A {
  constructor() {
    super();
  }
}
```

注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，
即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。